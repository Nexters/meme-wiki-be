plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.owasp.dependencycheck' version '8.4.0'
}
ext {
    springCloudVersion = "2025.0.0"
}

group = 'spring'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    implementation 'io.github.openfeign.querydsl:querydsl-jpa:7.0'
    implementation 'io.github.openfeign.querydsl:querydsl-apt:7.0'
    annotationProcessor 'io.github.openfeign.querydsl:querydsl-apt:7.0:jakarta'

    implementation 'software.amazon.awssdk:s3:2.24.12'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.webjars:bootstrap:5.3.2'
    implementation 'org.webjars:jquery:3.7.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

def generatedDir = "src/main/generated"

sourceSets {
    main {
        java {
            srcDir generatedDir
        }
    }
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generatedDir)
}

tasks.register('cleanGenerated', Delete) {
    delete generatedDir
}

tasks.named('clean') {
    dependsOn 'cleanGenerated'
}